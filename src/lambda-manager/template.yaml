AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda-Manager
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Coralogix-Lambda-Manager
    Description: Lambda-Manager provides automatic log group subscription for lambda functions.
    Author: Coralogix
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels:
      - coralogix
      - logs
      - loggroup
      - cloudwatch
      - lambda
    HomePageUrl: https://coralogix.com
    SemanticVersion: 2.0.9
    SourceCodeUrl: https://github.com/coralogix/coralogix-aws-serverless
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Integration configuration
        Parameters:
          - LogsFilter
          - RegexPattern
          - NotificationEmail
          - DestinationArn
          - DestinationRole
          - DestinationType
          - ScanOldLogGroups
          - AddPermissionsToAllLogGroups
      - Label:
          default: Lambda configuration
        Parameters:
          - FunctionMemorySize
          - FunctionTimeout
Parameters:
  LogsFilter:
    Type: String
    Description: Log group filter
    Default: ''
  DestinationArn:
    Type: String
    Description: Coralogix Firehose stream / Lambda  ARN
  DestinationRole:
    Type: String
    Description: Coralogix Firehose stream / Lambda role ARN
    Default: ''
  DestinationType:
    Type: String
    Description: firehose / lambda 
    Default: firehose
    AllowedValues:
      - firehose
      - lambda
  DisableAddPermission:
    Type: String
    Description: Disable adding permission to lambda
    Default: false
  ScanOldLogGroups:
    Type: String
    Description: Scan old log groups
    Default: false
  AddPermissionsToAllLogGroups:
    Type: String
    Description: Add permissions to allow all existing and new log groups to subscribe to the destination
    Default: false
  RegexPattern:
    Type: String
    Description: Comma-separated list of Loggroup name regex pattern
    Default: /aws/lambda/.*
  LogGroupPermissionPreFix:
    Type: String
    Description: instead creating one permission for each log group in the destination lambda, the code will take the prefix that you set in the parameter and create 1 permission for all of the log groups that match the prefix
    Default: ""
  AWSApiRequestsLimit:
    Type: Number
    Description: In case you got an error in the lambda which is related to ThrottlingException, then you can increase the limit of the requests that the lambda can do to the AWS API.
    Default: 10
  FunctionMemorySize:
    Type: Number
    Description: Lambda function memory limit
    MinValue: 128
    MaxValue: 3008
    Default: 1024
  FunctionTimeout:
    Type: Number
    Description: Lambda function timeout limit
    MinValue: 30
    MaxValue: 900
    Default: 300
  NotificationEmail:
    Type: String
    Description: Failure notification email address
    MaxLength: 320
    Default: ''
Conditions:
  IsDestinationLambda:
    Fn::Equals:
      - Ref: DestinationType
      - lambda
  IsNotificationEnabled:
    Fn::Not:
      - Fn::Equals:
          - Ref: NotificationEmail
          - ''
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CXLambdaUpdateConfig
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt LambdaFunction.Arn
              - Sid: SNSPublishPermission
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: "arn:aws:sns:us-east-1:771039649440:manager4-LambdaFunctionEventInvokeConfigOnFailureTopic-xB2dSpg5hshT"
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-LambdaFunction'
      Description: Adds Coralogix firehose to Loggroups
      CodeUri: .
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize:
        Ref: FunctionMemorySize
      Timeout:
        Ref: FunctionTimeout
      Environment:
        Variables:
          DISABLE_ADD_PERMISSION:
            Ref: DisableAddPermission
          LOGS_FILTER:
            Ref: LogsFilter
          REGEX_PATTERN:
            Ref: RegexPattern
          DESTINATION_ARN: 
            Ref: DestinationArn
          DESTINATION_ROLE: 
            Ref: DestinationRole
          DESTINATION_TYPE:
            Ref: DestinationType
          SCAN_OLD_LOGGROUPS:
            Ref: ScanOldLogGroups
          ADD_PERMISSIONS_TO_ALL_LOG_GROUPS:
            Ref: AddPermissionsToAllLogGroups
          LOG_GROUP_PERMISSION_PREFIX:
            Ref: LogGroupPermissionPreFix
          AWS_API_REUESTS_LIMIT:
            Ref: AWSApiRequestsLimit
      Policies:
        - Statement:
            - !If
              - IsDestinationLambda
              - Sid: CXLambdaUpdateConfig
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunctionConfiguration
                  - lambda:AddPermission
                Resource: 
                  - !Ref DestinationArn
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-LambdaFunction'
              - !Ref AWS::NoValue
            - Sid: CWSubscriptionPolicy
              Effect: Allow
              Action:
                - logs:PutSubscriptionFilter
                - logs:DescribeLogGroups
                - logs:DescribeSubscriptionFilters
              Resource:
                - "arn:aws:logs:*:*:*"
            - Sid: CXPassRole
              Effect: Allow
              Action: 
                - iam:PassRole
              Resource: 
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SNS
      Events:
        EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: 
                - "aws.logs"
              detail-type:
                - "AWS API Call via CloudTrail"
              detail:
                eventSource:
                  - "logs.amazonaws.com"
                eventName:
                  - "CreateLogGroup"
                requestParameters:
                  logGroupClass:
                    - "STANDARD"
            Target:
                Id: cx-loggroup-target

  LambdaTrigger:
    Type: Custom::LambdaTrigger
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn

  LambdaFunctionNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: IsNotificationEnabled
    Properties:
      Protocol: email
      Endpoint:
        Ref: NotificationEmail
      TopicArn:
        Ref: LambdaFunction.DestinationTopic
